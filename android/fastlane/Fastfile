ENV['FASTLANE_HIDE_TIMESTAMP'] = 1
ENV['FASTLANE_HIDE_GITHUB_ISSUES'] = 1
ENV['FASTLANE_HIDE_PLUGINS_TABLE'] = 1
skip_docs

platform :android do
  app_store_connect_api_key(
    key_id: ENV.fetch('APP_STORE_CONNECT_KEY_ID'),
    issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID'),
    key_filepath: ENV.fetch('APP_STORE_CONNECT_P8_KEY_PATH'),
    in_house: false
  )

  build_number = get_new_build_number(
    bundle_identifier: ENV.fetch('APP_BUNDLE_ID'),
    package_name: ENV.fetch('APP_PACKAGE_NAME'),
    google_play_json_key_path: ENV.fetch('GOOGLE_PLAY_JSON_KEY_PATH'),
    firebase_json_key_path: ENV.fetch('FIREBASE_JSON_KEY_PATH'),
    firebase_app_ios: ENV.fetch('FIREBASE_APP_ID_IOS'),
    firebase_app_android: ENV.fetch('FIREBASE_APP_ID_ANDROID')
  ).to_s

  build_name = get_new_build_name

  desc 'Upload a new build to Firebase App Distribution'
  lane :distribute do
    project_root = Dir.chdir('../..') { Dir.pwd }

    gradle(
      task: 'bundleRelease',
      project_dir: '..',
      properties: {
        'versionCode' => build_number,
        'versionName' => build_name
      }
    )

    aab_path = File.join(project_root, 'android/build/outputs/bundle/release/android-release.aab')
    firebase_app_distribution(
      app: ENV.fetch('FIREBASE_APP_ID_ANDROID'),
      groups: 'core-team',
      android_artifact_path: aab_path,
      service_credentials_file: ENV.fetch('FIREBASE_JSON_KEY_PATH')
    )
  end

  desc 'Deploy a new internal version to Google Play'
  lane :internal do
    project_root = Dir.chdir('../..') { Dir.pwd }

    gradle(
      task: 'bundleRelease',
      project_dir: '..',
      properties: {
        'versionCode' => build_number,
        'versionName' => build_name
      }
    )

    upload_to_play_store(
      track: 'internal',
      aab: File.join(project_root, 'android/build/outputs/bundle/release/android-release.aab'),
      json_key: ENV.fetch('GOOGLE_PLAY_JSON_KEY_PATH')
    )
  end
end
