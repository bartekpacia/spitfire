require 'base64'

skip_docs

project_root = Dir.chdir('../..') { Dir.pwd }

app_store_connect_api_key(
  key_id: ENV.fetch('APP_STORE_CONNECT_KEY_ID'),
  issuer_id: ENV.fetch('APP_STORE_CONNECT_ISSUER_ID'),
  key_filepath: ENV.fetch('APP_STORE_CONNECT_P8_KEY_PATH'),
  in_house: false
)

build_number = get_new_build_number(
  bundle_identifier: ENV.fetch('APP_BUNDLE_ID'),
  package_name: ENV.fetch('APP_PACKAGE_NAME'),
  google_play_json_key_path: ENV.fetch('GOOGLE_PLAY_JSON_KEY_PATH'),
  firebase_json_key_path: ENV.fetch('FIREBASE_JSON_KEY_PATH'),
  firebase_app_ios: ENV.fetch('FIREBASE_APP_ID_IOS'),
  firebase_app_android: ENV.fetch('FIREBASE_APP_ID_ANDROID')
).to_s

build_name = get_new_build_name

platform :ios do
  File.write(File.join(project_root, 'ios/robovm.properties'), "app.build=#{build_number}\n", mode: 'a')
  File.write(File.join(project_root, 'ios/robovm.properties'), "app.version=#{build_name}\n", mode: 'a')

  desc 'Upload a new build to Firebase App Distribution'
  lane :distribute do
    setup_ci if is_ci

    devices_file = File.join(project_root, 'fastlane', 'firebase_ios_devices.txt')
    firebase_app_distribution_get_udids(
      project_number: ENV.fetch('FIREBASE_PROJECT_NUMBER'),
      output_file: devices_file,
      service_credentials_file: ENV.fetch('FIREBASE_JSON_KEY_PATH')
    )

    register_devices(devices_file:)

    sync_code_signing(
      type: 'adhoc',
      readonly: false,
      force_for_new_devices: true
    )

    gradle(
      task: ':ios:robovmArchive',
      project_dir: project_root
    )

    firebase_app_distribution(
      app: ENV.fetch('FIREBASE_APP_ID_IOS'),
      groups: 'core-team',
      ipa_path: File.join(project_root, 'ios/build/robovm/IOSLauncher.ipa'),
      service_credentials_file: ENV.fetch('FIREBASE_JSON_KEY_PATH')
    )
  end

  desc 'Upload a new release build to App Store'
  lane :prod do
    setup_ci if is_ci

    sync_code_signing(
      type: 'appstore',
      readonly: false
    )

    ENV['SPITFIRE_APP_STORE'] = 'true'
    gradle(
      task: ':ios:robovmArchive',
      project_dir: project_root
    )

    upload_to_app_store(
      force: true,
      precheck_include_in_app_purchases: false,
      skip_screenshots: true,
      skip_metadata: true,
      ipa: File.join(project_root, 'ios/build/robovm/IOSLauncher.ipa')
    )
  end
end

platform :android do
  desc 'Upload a new build to Firebase App Distribution'
  lane :distribute do
    gradle(
      task: ':android:bundleRelease',
      project_dir: project_root,
      properties: {
        'versionCode' => build_number,
        'versionName' => build_name
      }
    )

    aab_path = File.join(project_root, 'android/build/outputs/bundle/release/android-release.aab')
    firebase_app_distribution(
      app: ENV.fetch('FIREBASE_APP_ID_ANDROID'),
      groups: 'core-team',
      android_artifact_path: aab_path,
      service_credentials_file: ENV.fetch('FIREBASE_JSON_KEY_PATH')
    )
  end

  desc 'Deploy a new internal version to Google Play'
  lane :internal do
    gradle(
      task: ':android:bundleRelease',
      project_dir: project_root,
      properties: {
        'versionCode' => build_number,
        'versionName' => build_name
      }
    )

    upload_to_play_store(
      track: 'internal',
      aab: File.join(project_root, 'android/build/outputs/bundle/release/android-release.aab'),
      json_key: ENV.fetch('GOOGLE_PLAY_JSON_KEY_PATH'),
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      mapping_paths: [
        File.join(project_root, 'android/build/outputs/mapping/release/mapping.txt')
      ]
    )
  end
end
