#!/usr/bin/env sh
set -eu # -o pipefail # Debian dash does not support -o pipefail

# This script creates the .env file.

MAIN_VAULT="Developer"
VAULT="spitfire"

if [ ! -f "settings.gradle.kts" ]; then
	# Do not depend on root directory name, because it may change on CI. For
	# example Cirrus CI sets it as "working-dir".
	echo "Must be run from the project root, but pubspec.yaml does not exist in current directory $PWD"
	ls -lah
	exit 1
fi

if ! command -v op >/dev/null 2>&1; then
	echo "op command (1Password) CLI is not installed"
	exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
	echo "jq is not installed"
	exit 1
fi

true >.env # Clear file

_export() {
	name="${1:-}"
	value="${2:-}"

	echo "$name=$value" >>.env
}

_export APP_BUNDLE_ID "pl.baftek.spitfire"
_export APP_PACKAGE_NAME "pl.baftek.spitfire"
_export FIREBASE_PROJECT_NUMBER "op://$VAULT/Firebase/project number"
_export FIREBASE_APP_ID_IOS "op://$VAULT/Firebase/iOS app ID"
_export FIREBASE_APP_ID_ANDROID "op://$VAULT/Firebase/Android app ID"

android_keystore() {
	keystore_properties="$PWD/android/keystore.properties"
	keystore="$PWD/android/keystore.jks"

	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$keystore" \
		"Android keystore" >/dev/null

	cat <<EOF >"$keystore_properties"
storeFile=$keystore
storePassword=$(op read "op://$MAIN_VAULT/Android Keystore/Keystore password")
keyAlias=BaftekKey_spitfire
keyPassword=$(op read "op://$MAIN_VAULT/Android Keystore/Password for key BaftekKey_spitfire")
EOF

	echo "$keystore_properties"
}

google_service_accounts() {
	# for Google Play Android Developer
	GOOGLE_PLAY_JSON_KEY_PATH="$PWD/android/google_play_android_developer_sa_key.json"
	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$GOOGLE_PLAY_JSON_KEY_PATH" \
		"Google Play Android Developer service account key"
	_export GOOGLE_PLAY_JSON_KEY_PATH "$GOOGLE_PLAY_JSON_KEY_PATH"

	# for Firebase App Distribution
	FIREBASE_JSON_KEY_PATH="$PWD/android/firebase_sa_key.json"
	op read "op://$VAULT/Firebase/firebase_sa_key.json" \
		--force \
		--out-file "$FIREBASE_JSON_KEY_PATH"

	_export FIREBASE_JSON_KEY_PATH "$FIREBASE_JSON_KEY_PATH"
}

fastlane_match() {
	GITHUB_USERNAME="op://$VAULT/GitHub/username"
	_export GITHUB_USERNAME "$GITHUB_USERNAME"

	GITHUB_PAT="op://$VAULT/GitHub/PAT"
	_export GITHUB_PAT "$GITHUB_PAT"

	MATCH_PASSWORD="op://$MAIN_VAULT/Fastlane Match certificates/password"
	_export MATCH_PASSWORD "$MATCH_PASSWORD"
}

app_store_connect() {
	APP_STORE_CONNECT="App Store Connect API key"

	APP_STORE_CONNECT_ISSUER_ID="op://$MAIN_VAULT/$APP_STORE_CONNECT/Issuer ID"
	_export APP_STORE_CONNECT_ISSUER_ID "$APP_STORE_CONNECT_ISSUER_ID"

	APP_STORE_CONNECT_KEY_ID="op://$MAIN_VAULT/$APP_STORE_CONNECT/Key ID"
	_export APP_STORE_CONNECT_KEY_ID "$APP_STORE_CONNECT_KEY_ID"

	APP_STORE_CONNECT_P8_KEY_PATH="$PWD/ios/app_store_connect_api_key.p8"
	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$APP_STORE_CONNECT_P8_KEY_PATH" \
		"$APP_STORE_CONNECT"
	_export APP_STORE_CONNECT_P8_KEY_PATH "$APP_STORE_CONNECT_P8_KEY_PATH"
}

android_keystore
google_service_accounts
fastlane_match
app_store_connect
